#!/usr/bin/env deployer

import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")
import("rtt_rsbcomm")
import("rtt_gazebo_embedded")
require("os")

import("rtt-gazebo-robot-sim")
import("rtt-core-extensions")

loadComponent("gazebo","RTTGazeboEmbedded")

setActivity("gazebo",0,10,ORO_SCHED_OTHER)

gazebo.argv = strings("--verbose","-s /orocos/gnulinux/rtt_gazebo_system/librtt_gazebo_system.so")

gazebo.configure()

gazebo.start()

gazebo.toggleDynamicsSimulation(false)

gazebo.spawn_model_at_pos("lwr_right", "model://kuka-lwr-4plus", 0, 0, 0)
gazebo.spawn_model_at_pos("lwr_left", "model://kuka-lwr-4plus",  0.0, -0.9, 0)

import("rtt-gazebo-robot-sim")

loadComponent("lwr_right","cogimon::robotSim")
setActivity("lwr_right",0,11,ORO_SCHED_OTHER)

loadComponent("lwr_left","cogimon::robotSim")
setActivity("lwr_left",0,11,ORO_SCHED_OTHER)


var string urdf_path = os.getenv("GAZEBO_MODEL_PATH") + "/kuka-lwr-4plus/model.urdf"
var string srdf_path = os.getenv("GAZEBO_MODEL_PATH") + "/kuka-lwr-4plus/model.srdf"

lwr_right.loadURDFAndSRDF(urdf_path, srdf_path)
lwr_right.getModel("lwr_right")
lwr_right.configure()

lwr_left.loadURDFAndSRDF(urdf_path, srdf_path)
lwr_left.getModel("lwr_left")
lwr_left.configure()

var array ref = array(-0.4, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0)
lwr_right.setInitialPosition("full_arm", ref)
lwr_left.setInitialPosition("full_arm", ref)

gazebo.toggleDynamicsSimulation(true)

stream("lwr_right.full_arm_JointPositionCtrl", rsb.transport.socket.scope("/lwr_right/full_arm/cmd"))
stream("lwr_left.full_arm_JointPositionCtrl", rsb.transport.socket.scope("/lwr_left/full_arm/cmd"))


//### Configuring Components from Orocos-ROS

import("rtt_ros")
ros.import("test_orocos")
## Configure and start the hello_robot component
loadComponent("interface","Test_orocos")
setActivity("interface",0.001,HighestPriority,ORO_SCHED_RT)

//## Configure and start the hello_robot component
var ConnPolicy cp;
stream("interface.Right_arm_in",     ros.topic("/KUKA/Right/in"))
stream("interface.Right_q_arm_out",  ros.topic("/KUKA/Right/q/out"))
stream("interface.Right_Dq_arm_out", ros.topic("/KUKA/Right/Dq/out"))
stream("interface.Right_T_arm_out",  ros.topic("/KUKA/Right/T/out"))

stream("interface.Left_arm_in",     ros.topic("/KUKA/Left/in"))
stream("interface.Left_q_arm_out",  ros.topic("/KUKA/Left/q/out"))
stream("interface.Left_Dq_arm_out", ros.topic("/KUKA/Left/Dq/out"))
stream("interface.Left_T_arm_out",  ros.topic("/KUKA/Left/T/out"))

connect("interface.JointPositionOutputPort_right_arm", "lwr_right.full_arm_JointPositionCtrl", cp)
connect("lwr_right.full_arm_JointFeedback", "interface.JointPositionInputPort_right_arm", cp)

connect("interface.JointPositionOutputPort_left_arm", "lwr_left.full_arm_JointPositionCtrl", cp)
connect("lwr_left.full_arm_JointFeedback", "interface.JointPositionInputPort_left_arm", cp)

//## Configure and start the hello_robot component
interface.configure()
interface.start()