#!/usr/bin/env deployer

import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")
import("rtt_gazebo_embedded")
import("CosimaUtilities")
require("os")

import("rtt-gazebo-robot-sim")
import("rtt-core-extensions")

loadComponent("gazebo","RTTGazeboEmbedded")

setActivity("gazebo",0,10,ORO_SCHED_OTHER)

gazebo.argv = strings("--verbose")

var string path_world="/home/joshua/catkin_ws/src/IJRR/gazebo_bring_up/Dual_Arm_world.world"

gazebo.world_path = path_world

gazebo.configure()

gazebo.start()

gazebo.toggleDynamicsSimulation(true)

gazebo.spawn_model_at_pos("lwr_right", "model://kuka-lwr-4plus", 0, 0.45, 0.74)
gazebo.spawn_model_at_pos("lwr_left", "model://kuka-lwr-4plus",  0.0, -0.45, 0.74)

import("rtt-gazebo-robot-sim")

loadComponent("lwr_right","cogimon::robotSim")
setActivity("lwr_right",0,11,ORO_SCHED_OTHER)

loadComponent("lwr_left","cogimon::robotSim")
setActivity("lwr_left",0,11,ORO_SCHED_OTHER)


var string urdf_path = os.getenv("GAZEBO_MODEL_PATH") + "/kuka-lwr-4plus/model.urdf"
var string srdf_path = os.getenv("GAZEBO_MODEL_PATH") + "/kuka-lwr-4plus/model.srdf"

lwr_right.loadURDFAndSRDF(urdf_path, srdf_path)
lwr_right.getModel("lwr_right")
lwr_right.configure()

lwr_left.loadURDFAndSRDF(urdf_path, srdf_path)
lwr_left.getModel("lwr_left")
lwr_left.configure()

var array ref = array(-0.4, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0)
lwr_right.setInitialPosition("full_arm", ref)
lwr_left.setInitialPosition("full_arm", ref)

gazebo.toggleDynamicsSimulation(true)
import("rtt_rsbcomm")
stream("lwr_right.full_arm_JointPositionCtrl", rsb.transport.socket.scope("/lwr_right/full_arm/cmd"))
stream("lwr_left.full_arm_JointPositionCtrl", rsb.transport.socket.scope("/lwr_left/full_arm/cmd"))


## Configuring Components from Orocos-ROS

import("rtt_ros")
ros.import("test_orocos")
## Configure and start the hello_robot component
loadComponent("interface","Test_orocos")
setActivity("interface",0.001,HighestPriority,ORO_SCHED_RT)

## Importing a new object 
loadComponent("boxpose", "GazeboPose")
setActivity("boxpose",0.01,10,ORO_SCHED_OTHER)
boxpose.setModelname("ObjectBox");
boxpose.preparePorts();
var eigen_vector objPoseTranslation = eigen_vector(3);
objPoseTranslation[0] = 0;
objPoseTranslation[1] = 0;
objPoseTranslation[2] =0;
boxpose.getPoseTranslation(objPoseTranslation);
boxpose.preparePorts();
boxpose.configure()
boxpose.start()

## Configure and start the hello_robot component
var ConnPolicy cp;
stream("interface.Right_arm_in",     ros.topic("/KUKA/Right/in"))
stream("interface.Right_q_arm_out",  ros.topic("/KUKA/Right/q/out"))
stream("interface.Right_Dq_arm_out", ros.topic("/KUKA/Right/Dq/out"))
stream("interface.Right_T_arm_out",  ros.topic("/KUKA/Right/T/out"))

stream("interface.Left_arm_in",     ros.topic("/KUKA/Left/in"))
stream("interface.Left_q_arm_out",  ros.topic("/KUKA/Left/q/out"))
stream("interface.Left_Dq_arm_out", ros.topic("/KUKA/Left/Dq/out"))
stream("interface.Left_T_arm_out",  ros.topic("/KUKA/Left/T/out"))


stream("interface.Object_Position_in",  ros.topic("/Object/Position/in"))
stream("interface.Object_Position_out", ros.topic("/Object/Pos/out"))
stream("interface.Object_Vel_out",  ros.topic("/Object/Vel/out"))


connect("interface.JointPositionOutputPort_right_arm", "lwr_right.full_arm_JointPositionCtrl", cp)
connect("lwr_right.full_arm_JointFeedback", "interface.JointPositionInputPort_right_arm", cp)

connect("interface.JointPositionOutputPort_left_arm", "lwr_left.full_arm_JointPositionCtrl", cp)
connect("lwr_left.full_arm_JointFeedback", "interface.JointPositionInputPort_left_arm", cp)

connect("boxpose.out_pose_port", "interface.ObjectPositionInputPort", cp)
connect("boxpose.out_poseVel_port", "interface.ObjectVelocityInputPort", cp)

connect("interface.ObjectPositionOutputPort", "boxpose.in_pose_port", cp)

interface.configure()
interface.start()

